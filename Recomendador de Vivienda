# -----------------------------------------------
# Predicción de Precios de Viviendas con GUI
# Red Neuronal + Sistema Difuso + Sistema Experto

# -----------------------------------------------

import pandas as pd
import numpy as np
import tkinter as tk
from tkinter import ttk
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler
import warnings

# Ignorar warnings de convergencia para este ejemplo
warnings.filterwarnings("ignore", category=UserWarning)

# -----------------------------
# 1️⃣ Dataset de ejemplo
# -----------------------------
data = pd.DataFrame({
    'metros_cuadrados':[50, 80, 120, 60, 200],
    'habitaciones':[2, 3, 4, 2, 5],
    'zona':[1,2,3,2,3],
    'antiguedad':[10,5,2,15,1],
    'precio':[100, 150, 250, 120, 400]
})

# -----------------------------
# 2️⃣ Sistema Difuso
# -----------------------------
zona = ctrl.Antecedent(np.arange(0,4,1), 'zona')
zona['mala'] = fuzz.trimf(zona.universe, [0,0,1])
zona['regular'] = fuzz.trimf(zona.universe, [1,2,3])
zona['buena'] = fuzz.trimf(zona.universe, [2,3,3])

metros = ctrl.Antecedent(np.arange(0,301,10), 'metros')
metros['pequena'] = fuzz.trimf(metros.universe, [0,0,80])
metros['mediana'] = fuzz.trimf(metros.universe, [50,120,200])
metros['grande'] = fuzz.trimf(metros.universe, [150,300,300])

precio_difuso = ctrl.Consequent(np.arange(0,501,10), 'precio')
precio_difuso['bajo'] = fuzz.trimf(precio_difuso.universe, [0,0,150])
precio_difuso['medio'] = fuzz.trimf(precio_difuso.universe, [100,200,300])
precio_difuso['alto'] = fuzz.trimf(precio_difuso.universe, [250,500,500])

rule1 = ctrl.Rule(zona['buena'] & metros['grande'], precio_difuso['alto'])
rule2 = ctrl.Rule(zona['mala'] & metros['pequena'], precio_difuso['bajo'])
rule3 = ctrl.Rule(zona['regular'] & metros['mediana'], precio_difuso['medio'])

sistema_precio = ctrl.ControlSystem([rule1, rule2, rule3])
sim_precio = ctrl.ControlSystemSimulation(sistema_precio)

def prediccion_difusa(zona_val, metros_val):
    sim_precio.input['zona'] = zona_val
    sim_precio.input['metros'] = metros_val
    sim_precio.compute()
    return sim_precio.output['precio']

# -----------------------------
# 3️⃣ Red Neuronal con normalización
# -----------------------------
X = data[['metros_cuadrados','habitaciones','zona','antiguedad']].values
y = data['precio'].values

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

nn = MLPRegressor(hidden_layer_sizes=(5,), max_iter=1000, random_state=42)
nn.fit(X_scaled, y)

def prediccion_nn(metros_val, hab_val, zona_val, antiguedad_val):
    X_input_scaled = scaler.transform([[metros_val, hab_val, zona_val, antiguedad_val]])
    return nn.predict(X_input_scaled)[0]

# -----------------------------
# 4️⃣ Sistema Experto
# -----------------------------
def sistema_experto(vivienda):
    precio = 0
    if vivienda['zona'] == 3:
        precio += 200
    elif vivienda['zona'] == 2:
        precio += 150
    else:
        precio += 100

    if vivienda['metros_cuadrados'] > 150:
        precio += 150
    elif vivienda['metros_cuadrados'] > 80:
        precio += 100
    else:
        precio += 50

    if vivienda['antiguedad'] < 5:
        precio += 50
    return precio

# -----------------------------
# 5️⃣ GUI con Tkinter
# -----------------------------
def calcular_precios():
    try:
        metros_val = float(entry_metros.get())
        hab_val = int(entry_habitaciones.get())
        zona_val = int(combo_zona.get())
        antiguedad_val = int(entry_antiguedad.get())
    except ValueError:
        resultado_label.config(text="Ingrese valores numéricos válidos")
        return

    precio_nn = prediccion_nn(metros_val, hab_val, zona_val, antiguedad_val)
    precio_dif = prediccion_difusa(zona_val, metros_val)
    precio_exp = sistema_experto({'metros_cuadrados':metros_val,'habitaciones':hab_val,
                                  'zona':zona_val,'antiguedad':antiguedad_val})
    
    resultado_label.config(text=f"Predicción NN: ${precio_nn:.2f}\n"
                                f"Predicción Difusa: ${precio_dif:.2f}\n"
                                f"Predicción Experto: ${precio_exp:.2f}")

root = tk.Tk()
root.title("Predicción de Precios de Viviendas")

tk.Label(root, text="Metros cuadrados:").grid(row=0, column=0, padx=5, pady=5)
entry_metros = tk.Entry(root)
entry_metros.grid(row=0, column=1, padx=5, pady=5)

tk.Label(root, text="Habitaciones:").grid(row=1, column=0, padx=5, pady=5)
entry_habitaciones = tk.Entry(root)
entry_habitaciones.grid(row=1, column=1, padx=5, pady=5)

tk.Label(root, text="Zona (1=Mala, 2=Regular, 3=Buena):").grid(row=2, column=0, padx=5, pady=5)
combo_zona = ttk.Combobox(root, values=[1,2,3], state="readonly")
combo_zona.current(1)
combo_zona.grid(row=2, column=1, padx=5, pady=5)

tk.Label(root, text="Antigüedad (años):").grid(row=3, column=0, padx=5, pady=5)
entry_antiguedad = tk.Entry(root)
entry_antiguedad.grid(row=3, column=1, padx=5, pady=5)

tk.Button(root, text="Calcular Precio", command=calcular_precios).grid(row=4, column=0, columnspan=2, pady=10)

resultado_label = tk.Label(root, text="", justify="left")
resultado_label.grid(row=5, column=0, columnspan=2, pady=10)

root.mainloop()
